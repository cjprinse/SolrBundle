<?php

namespace FS\SolrBundle\Doctrine\Mapper;

use FS\SolrBundle\Doctrine\Annotation\Field;
use FS\SolrBundle\Doctrine\Annotation\Id;

/**
 * Defines common methods for meta-information
 */
interface MetaInformationInterface
{
    const DOCUMENT_KEY_FIELD_NAME = 'id';

    /**
     * used when given object is a ORM entity
     */
    const DOCTRINE_MAPPER_TYPE_RELATIONAL = 'relational';

    /**
     * used when given object is a ODM document
     */
    const DOCTRINE_MAPPER_TYPE_DOCUMENT = 'document';

    /**
     * Returns id generated by doctrine
     *
     * @return int
     */
    public function getEntityId();

    /**
     * Returns the Id annotation class
     *
     * @return Id
     */
    public function getIdentifier();

    /**
     * Returns full qualified classname
     *
     * @return string
     */
    public function getClassName();

    /**
     * Returns classname in lower case without namespaces
     *
     * AppBundle\Entity\ExampleEntity => exampleentity
     *
     * @return string
     */
    public function getDocumentName();

    /**
     * @return Field[]
     */
    public function getFields();

    /**
     * Returns full qualified classname of repository-class
     *
     * @return string
     */
    public function getRepository();

    /**
     * Source/target entity instance
     *
     * @return object
     */
    public function getEntity();

    /**
     * @param bool $autogenerate
     */
    public function setAutoGenerateId(bool $autogenerate);

    /**
     * @return bool
     */
    public function getAutoGenerateId();

    /**
     * @param string $fieldName
     *
     * @return Field|null
     *
     * @throws \InvalidArgumentException if given $fieldName is unknown
     */
    public function getField($fieldName);

    /**
     * @return array
     */
    public function getFieldMapping();

    /**
     * The document boost value
     *
     * @return number
     */
    public function getBoost();

    /**
     * @return string
     */
    public function getSynchronizationCallback();

    /**
     * @return boolean
     */
    public function hasSynchronizationFilter();

    /**
     * Returns the configured index argument in FS\SolrBundle\Doctrine\Annotation\Document or the returns value of the index-handler callback
     *
     * @return string
     */
    public function getIndex();

    /**
     * Returns combination of DOCUMENT_KEY_FIELD_NAME and entity-id
     * @param $entity
     *
     * @return string
     */
    public function getDocumentKey(object $entity);



    /**
     * Returns MetaInformationInterface::DOCTRINE_MAPPER_TYPE_DOCUMENT if target is an doctrine-odm object or
     * MetaInformationInterface::DOCTRINE_MAPPER_TYPE_RELATIONAL if it is an doctrine-orm object, otherwise an empty string
     *
     * @return string
     */
    public function getDoctrineMapperType();

    /**
     * @return bool
     */
    public function isNested();
}
